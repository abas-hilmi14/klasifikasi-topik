# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13S834p_5DF3_slh5io_z1IBYDJbXfUBY
"""

# app.py (versi yang sudah disesuaikan)

import streamlit as st
import numpy as np
import pandas as pd
import joblib

# --- Fungsi untuk memuat semua objek ---
# Menggunakan cache agar tidak perlu load ulang setiap kali ada interaksi
@st.cache_data
def load_objects():
    """Memuat semua model dan objek preprocessing yang diperlukan."""
    model = joblib.load("model_svm_final.pkl")
    imputer = joblib.load("imputer.pkl")
    scaler = joblib.load("scaler.pkl")
    label_encoder = joblib.load("label_encoder.pkl")
    feature_names = joblib.load("feature_names.pkl")
    return model, imputer, scaler, label_encoder, feature_names

# Muat semua objek saat aplikasi dimulai
try:
    model, imputer, scaler, label_encoder, feature_names = load_objects()
    st.set_page_config(page_title="Klasifikasi Topik Skripsi", layout="centered")
except FileNotFoundError:
    st.error("File model atau preprocessing tidak ditemukan. Pastikan file .pkl sudah ada di direktori yang sama.")
    st.stop()


# --- Antarmuka Aplikasi ---
st.title("🎓 Klasifikasi Topik Skripsi Mahasiswa")
st.write("Aplikasi ini memprediksi rekomendasi topik skripsi berdasarkan nilai mata kuliah mahasiswa.")
st.markdown("---")

# Form input nilai-nilai secara dinamis berdasarkan fitur yang disimpan
with st.form("prediction_form"):
    st.subheader("Masukkan Nilai Mata Kuliah Mahasiswa")
    input_data = {}

    # Buat 2 kolom agar tidak terlalu panjang ke bawah
    col1, col2 = st.columns(2)

    for i, feature in enumerate(feature_names):
        if i % 2 == 0:
            with col1:
                input_data[feature] = st.number_input(
                    label=f"{feature}",
                    min_value=0.0,
                    max_value=100.0,
                    value=0.0, # Nilai default
                    step=1.0,
                    key=feature
                )
        else:
            with col2:
                input_data[feature] = st.number_input(
                    label=f"{feature}",
                    min_value=0.0,
                    max_value=100.0,
                    value=75.0, # Nilai default
                    step=1.0,
                    key=feature
                )

    # Tombol submit form
    submitted = st.form_submit_button("🔍 Prediksi Topik")

# --- Logika Prediksi ---
if submitted:
    # Urutkan input sesuai dengan urutan fitur saat training
    input_list = [input_data[feature] for feature in feature_names]

    # 1. Konversi ke numpy array
    input_array = np.array(input_list).reshape(1, -1)

    # 2. Terapkan imputasi (menggunakan .transform, bukan .fit_transform)
    # Meskipun input pengguna lengkap, langkah ini memastikan konsistensi pipeline
    imputed_input = imputer.transform(input_array)

    # 3. Terapkan scaling (menggunakan .transform, bukan .fit_transform)
    scaled_input = scaler.transform(imputed_input)

    # 4. Lakukan prediksi
    prediction_code = model.predict(scaled_input)

    # 5. Ubah kode prediksi kembali ke label asli
    prediction_label = label_encoder.inverse_transform(prediction_code)[0]

    # Tampilkan hasil
    st.success(f"**Rekomendasi Topik Skripsi:** {prediction_label} 🎯")
